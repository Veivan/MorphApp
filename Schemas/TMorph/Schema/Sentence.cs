// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TMorph.Schema
{

using global::System;
using global::FlatBuffers;

public struct Sentence : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Sentence GetRootAsSentence(ByteBuffer _bb) { return GetRootAsSentence(_bb, new Sentence()); }
  public static Sentence GetRootAsSentence(ByteBuffer _bb, Sentence obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Sentence __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Order { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public Node? Nodes(int j) { int o = __p.__offset(6); return o != 0 ? (Node?)(new Node()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NodesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Lexema? Words(int j) { int o = __p.__offset(8); return o != 0 ? (Lexema?)(new Lexema()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WordsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Phrase { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPhraseBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<Sentence> CreateSentence(FlatBufferBuilder builder,
      short order = 0,
      VectorOffset nodesOffset = default(VectorOffset),
      VectorOffset wordsOffset = default(VectorOffset),
      StringOffset phraseOffset = default(StringOffset)) {
    builder.StartObject(4);
    Sentence.AddPhrase(builder, phraseOffset);
    Sentence.AddWords(builder, wordsOffset);
    Sentence.AddNodes(builder, nodesOffset);
    Sentence.AddOrder(builder, order);
    return Sentence.EndSentence(builder);
  }

  public static void StartSentence(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddOrder(FlatBufferBuilder builder, short order) { builder.AddShort(0, order, 0); }
  public static void AddNodes(FlatBufferBuilder builder, VectorOffset nodesOffset) { builder.AddOffset(1, nodesOffset.Value, 0); }
  public static VectorOffset CreateNodesVector(FlatBufferBuilder builder, Offset<Node>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartNodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWords(FlatBufferBuilder builder, VectorOffset wordsOffset) { builder.AddOffset(2, wordsOffset.Value, 0); }
  public static VectorOffset CreateWordsVector(FlatBufferBuilder builder, Offset<Lexema>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartWordsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhrase(FlatBufferBuilder builder, StringOffset phraseOffset) { builder.AddOffset(3, phraseOffset.Value, 0); }
  public static Offset<Sentence> EndSentence(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Sentence>(o);
  }
};


}
