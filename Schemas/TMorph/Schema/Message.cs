// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TMorph.Schema
{

using global::System;
using global::FlatBuffers;

public struct Message : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Message GetRootAsMessage(ByteBuffer _bb) { return GetRootAsMessage(_bb, new Message()); }
  public static Message GetRootAsMessage(ByteBuffer _bb, Message obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MessType MessType { get { int o = __p.__offset(4); return o != 0 ? (MessType)__p.bb.GetSbyte(o + __p.bb_pos) : MessType.mRequest; } }
  public ServType ServerType { get { int o = __p.__offset(6); return o != 0 ? (ServType)__p.bb.GetSbyte(o + __p.bb_pos) : ServType.svMorph; } }
  public ComType Comtype { get { int o = __p.__offset(8); return o != 0 ? (ComType)__p.bb.GetLong(o + __p.bb_pos) : ComType.Undef; } }
  public Param? Params(int j) { int o = __p.__offset(10); return o != 0 ? (Param?)(new Param()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParamsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Sentence? Sentences(int j) { int o = __p.__offset(12); return o != 0 ? (Sentence?)(new Sentence()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SentencesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Paragraph? Paragraphs(int j) { int o = __p.__offset(14); return o != 0 ? (Paragraph?)(new Paragraph()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParagraphsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Document? Documents(int j) { int o = __p.__offset(16); return o != 0 ? (Document?)(new Document()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DocumentsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Container? Containers(int j) { int o = __p.__offset(18); return o != 0 ? (Container?)(new Container()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ContainersLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long DbID { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Message> CreateMessage(FlatBufferBuilder builder,
      MessType messType = MessType.mRequest,
      ServType serverType = ServType.svMorph,
      ComType comtype = ComType.Undef,
      VectorOffset paramsOffset = default(VectorOffset),
      VectorOffset sentencesOffset = default(VectorOffset),
      VectorOffset paragraphsOffset = default(VectorOffset),
      VectorOffset documentsOffset = default(VectorOffset),
      VectorOffset containersOffset = default(VectorOffset),
      long dbID = 0) {
    builder.StartObject(9);
    Message.AddDbID(builder, dbID);
    Message.AddComtype(builder, comtype);
    Message.AddContainers(builder, containersOffset);
    Message.AddDocuments(builder, documentsOffset);
    Message.AddParagraphs(builder, paragraphsOffset);
    Message.AddSentences(builder, sentencesOffset);
    Message.AddParams(builder, paramsOffset);
    Message.AddServerType(builder, serverType);
    Message.AddMessType(builder, messType);
    return Message.EndMessage(builder);
  }

  public static void StartMessage(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddMessType(FlatBufferBuilder builder, MessType messType) { builder.AddSbyte(0, (sbyte)messType, 0); }
  public static void AddServerType(FlatBufferBuilder builder, ServType serverType) { builder.AddSbyte(1, (sbyte)serverType, 0); }
  public static void AddComtype(FlatBufferBuilder builder, ComType comtype) { builder.AddLong(2, (long)comtype, 0); }
  public static void AddParams(FlatBufferBuilder builder, VectorOffset paramsOffset) { builder.AddOffset(3, paramsOffset.Value, 0); }
  public static VectorOffset CreateParamsVector(FlatBufferBuilder builder, Offset<Param>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSentences(FlatBufferBuilder builder, VectorOffset sentencesOffset) { builder.AddOffset(4, sentencesOffset.Value, 0); }
  public static VectorOffset CreateSentencesVector(FlatBufferBuilder builder, Offset<Sentence>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSentencesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParagraphs(FlatBufferBuilder builder, VectorOffset paragraphsOffset) { builder.AddOffset(5, paragraphsOffset.Value, 0); }
  public static VectorOffset CreateParagraphsVector(FlatBufferBuilder builder, Offset<Paragraph>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartParagraphsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDocuments(FlatBufferBuilder builder, VectorOffset documentsOffset) { builder.AddOffset(6, documentsOffset.Value, 0); }
  public static VectorOffset CreateDocumentsVector(FlatBufferBuilder builder, Offset<Document>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDocumentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddContainers(FlatBufferBuilder builder, VectorOffset containersOffset) { builder.AddOffset(7, containersOffset.Value, 0); }
  public static VectorOffset CreateContainersVector(FlatBufferBuilder builder, Offset<Container>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartContainersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDbID(FlatBufferBuilder builder, long dbID) { builder.AddLong(8, dbID, 0); }
  public static Offset<Message> EndMessage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Message>(o);
  }
  public static void FinishMessageBuffer(FlatBufferBuilder builder, Offset<Message> offset) { builder.Finish(offset.Value); }
};


}
